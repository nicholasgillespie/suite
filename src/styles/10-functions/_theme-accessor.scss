// Import design token config
@import "../00-settings/theme-config";

// Function to retrieve token values based on property
@function get($property: null, $value: null, $fallback: null) {
  // Store the original property value
  $originalProperty: $property;

  // If the property is "space", "margin", or "padding", set it to "margin" or "padding"
  @if $property == "space" {
    $property: "margin";
  }

  // Collect all properties that map to a token
  $validProperties: ();
  $propertyExists: false;

  // Iterate over each group in the groups map
  @each $group in $groups {
    $tokenName: map-get($group, "key");
    $properties: map-get($group, "properties");

    @if type-of($properties) == "map" {
      // Handle spacing token separately
      @if $tokenName == "spacing" {
        $properties: ("margin", "padding");
      } @else {
        $properties: map-keys($properties);
      }
    } @else if type-of($properties) == "string" {
      $properties: ($properties);
    }

    // Join the properties to the valid properties list
    $validProperties: join($validProperties, $properties);

    // Check if property exists in the map or list
    $propertyExists: index($properties, $property);

    // If the property exists, check if the value exists in the items
    @if $propertyExists {
      $prefix: map-get($group, "prefix");
      $items: map-get($theme, $tokenName);

      // Convert color values to a string
      $value: if(type-of($value) == "color", inspect($value), $value);

      // If value exists in map, return CSS variable; else, warn invalid value
      @if $prefix and map-has-key($items, $value) {
        @if $value == "standard" {
          @return var(--#{$prefix});
        } @else {
          @return var(--#{$prefix}-#{$value});
        }
      } @else {
        @if $originalProperty == "space" {
          $property: "space";
        }
        @warn "Invalid value `#{$value}` for property `#{$property}`. Available values are: #{map-keys($items)}.";
        @return null;
      }
    }
  }

  // If the property does not exist, print a warning message
  @if not $propertyExists {
    @warn "Invalid property `#{$property}`. Available properties are: #{$validProperties}.";
  }

  @return null;
}
